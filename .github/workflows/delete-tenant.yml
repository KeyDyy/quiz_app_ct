name: Delete Tenant

on:
  workflow_dispatch:
    inputs:
      tenant_id:
        description: 'Tenant ID to delete'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  GITHUB_REPOSITORY_OWNER: keydyy
  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}

jobs:
  delete_tenant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Tenant Exists
        id: verify_tenant
        run: |
          echo "Verifying tenant ${{ github.event.inputs.tenant_id }} exists..."
          
          # Check tenant state blob
          if ! az storage blob exists \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --container-name "tenant-states" \
            --name "${{ github.event.inputs.tenant_id }}/state.json" \
            --auth-mode key; then
            echo "Error: Tenant state not found"
            exit 1
          fi
          
          # Check container app
          if ! az containerapp show \
            --name "quiz-app-${{ github.event.inputs.tenant_id }}" \
            --resource-group quizapp &>/dev/null; then
            echo "Error: Container app not found"
            exit 1
          fi
          
          # Check storage container
          if ! az storage container exists \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --name "tenant-${{ github.event.inputs.tenant_id }}" \
            --auth-mode key; then
            echo "Error: Storage container not found"
            exit 1
          fi
          
          echo "Tenant verification successful"

      - name: Get Tenant State
        id: get_state
        run: |
          # Download tenant state for backup
          echo "Downloading tenant state for ${{ github.event.inputs.tenant_id }}..."
          
          # Create a temporary file for the state
          TEMP_FILE=$(mktemp)
          
          # Download the blob content
          az storage blob download \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --container-name "tenant-states" \
            --name "${{ github.event.inputs.tenant_id }}/state.json" \
            --file "$TEMP_FILE" \
            --auth-mode key || {
              echo "Error: Failed to download tenant state"
              exit 1
            }
          
          # Verify the file exists and has content
          if [ ! -s "$TEMP_FILE" ]; then
            echo "Error: Downloaded tenant state file is empty"
            exit 1
          fi
          
          # Try to parse the JSON to verify it's valid
          if ! jq . "$TEMP_FILE" > /dev/null 2>&1; then
            echo "Error: Invalid JSON in tenant state file"
            cat "$TEMP_FILE"
            exit 1
          fi
          
          # Store tenant state as a single line JSON string
          TENANT_STATE=$(jq -c '.' "$TEMP_FILE")
          echo "tenant_state=$TENANT_STATE" >> $GITHUB_OUTPUT
          
          # Clean up temp file
          rm "$TEMP_FILE"
          
          echo "Successfully downloaded and verified tenant state"

      - name: Create Backup
        run: |
          echo "Creating backup of tenant state..."
          BACKUP_TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          
          # Create backup container if it doesn't exist
          az storage container create \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --name "tenant-states-backup" \
            --auth-mode key || true
          
          # Copy the state file to backup
          az storage blob copy start \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --source-container "tenant-states" \
            --source-blob "${{ github.event.inputs.tenant_id }}/state.json" \
            --destination-container "tenant-states-backup" \
            --destination-blob "${{ github.event.inputs.tenant_id }}/state_${BACKUP_TIMESTAMP}.json" \
            --auth-mode key || {
              echo "Error: Failed to create backup"
              exit 1
            }
          
          echo "Backup created successfully"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=quizapp" \
            -backend-config="storage_account_name=quizapptfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=quiz-app/tenant-${{ github.event.inputs.tenant_id }}/terraform.tfstate" \
            -backend-config="use_oidc=true"

      - name: Terraform Plan
        run: |
          # Create a plan to destroy only the specific tenant's resources
          terraform plan \
            -var="container_apps={ \
              \"${{ github.event.inputs.tenant_id }}\" = null \
            }" \
            -destroy \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Verify Resource Deletion
        run: |
          echo "Verifying resource deletion..."
          
          # Check container app deletion
          if az containerapp show \
            --name "quiz-app-${{ github.event.inputs.tenant_id }}" \
            --resource-group quizapp &>/dev/null; then
            echo "Error: Container app still exists"
            exit 1
          fi
          
          # Check storage container deletion
          if az storage container show \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --name "tenant-${{ github.event.inputs.tenant_id }}" \
            --auth-mode key &>/dev/null; then
            echo "Error: Storage container still exists"
            exit 1
          fi
          
          echo "Resource deletion verified successfully"

      - name: Cleanup Tenant State
        run: |
          # Delete tenant state blob
          az storage blob delete \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --container-name "tenant-states" \
            --name "${{ github.event.inputs.tenant_id }}/state.json" \
            --auth-mode key || echo "Warning: Failed to delete tenant state blob"

      - name: Delete Container Image
        run: |
          gh auth login --with-token <<< "${{ secrets.GH_PAT }}"
          
          # Get all versions of the container image
          PACKAGE_VERSIONS=$(gh api \
            -X GET "/user/packages/container/quiz_app_ct-${{ github.event.inputs.tenant_id }}/versions" \
            --jq '.[].id' || echo "")
          
          # Delete each version
          for version_id in $PACKAGE_VERSIONS; do
            echo "Deleting container image version $version_id"
            gh api -X DELETE "/user/packages/container/quiz_app_ct-${{ github.event.inputs.tenant_id }}/versions/$version_id" || echo "Warning: Failed to delete version $version_id"
          done

      - name: Deployment Summary
        run: |
          echo "## Tenant Deletion Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tenant ID | \`${{ github.event.inputs.tenant_id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Deleted |" >> $GITHUB_STEP_SUMMARY
          echo "| Deleted Resources |" >> $GITHUB_STEP_SUMMARY
          echo "| - Container App | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| - Storage Container | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| - Tenant State | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| - Container Image | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Backup Created | Yes (in tenant-states-backup container) |" >> $GITHUB_STEP_SUMMARY
          echo "| Verification | All resources verified as deleted |" >> $GITHUB_STEP_SUMMARY
