name: Delete Tenant

on:
  workflow_dispatch:
    inputs:
      tenant_id:
        description: 'Tenant ID to delete'
        required: true
        type: string
      force_delete:
        description: 'Force delete tenant even if it has data (use with caution)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  GITHUB_REPOSITORY_OWNER: keydyy
  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}

jobs:
  delete_tenant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Tenant Exists
        id: verify_tenant
        run: |
          echo "Verifying tenant ${{ github.event.inputs.tenant_id }} exists..."

          if ! az storage blob exists \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --container-name "tenant-states" \
            --name "${{ github.event.inputs.tenant_id }}/state.json" \
            --auth-mode key; then
            echo "Error: Tenant state not found"
            exit 1
          fi

          az storage blob download \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --container-name "tenant-states" \
            --name "${{ github.event.inputs.tenant_id }}/state.json" \
            --file tenant-state.json \
            --auth-mode key

          TENANT_NAME=$(jq -r '.name' tenant-state.json)
          echo "tenant_name=$TENANT_NAME" >> $GITHUB_OUTPUT
          echo "Tenant verification successful"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=quizapp" \
            -backend-config="storage_account_name=quizapptfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=quiz-app/tenant-${{ github.event.inputs.tenant_id }}/terraform.tfstate" \
            -backend-config="use_oidc=true"

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="github_repository=keydyy/quiz_app_ct" \
            -var="ghcr_username=keydyy" \
            -var="ghcr_pat=${{ secrets.GH_PAT }}" \
            -var="create_new_environment=false" \
            -var="image_name=quiz_app_ct" \
            -var="force_delete=${{ github.event.inputs.force_delete }}" \
            -var="container_apps={ \"${{ github.event.inputs.tenant_id }}\" = { name = \"${{ steps.verify_tenant.outputs.tenant_name }}\", action = \"delete\" } }" \
            -var="tenant_to_delete=${{ github.event.inputs.tenant_id }}" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          MANAGEMENT_SUMMARY=$(terraform output -json management_summary)
          echo "management_summary=$MANAGEMENT_SUMMARY" >> $GITHUB_OUTPUT

          DELETED_TENANTS=$(terraform output -json deleted_tenants)
          echo "deleted_tenants=$DELETED_TENANTS" >> $GITHUB_OUTPUT

      - name: Delete Container Image
        run: |
          gh auth login --with-token <<< "${{ secrets.GH_PAT }}"

          PACKAGE_VERSIONS=$(gh api \
            -X GET "/user/packages/container/quiz_app_ct-${{ github.event.inputs.tenant_id }}/versions" \
            --jq '.[].id' || echo "")

          for version_id in $PACKAGE_VERSIONS; do
            echo "Deleting container image version $version_id"
            gh api -X DELETE "/user/packages/container/quiz_app_ct-${{ github.event.inputs.tenant_id }}/versions/$version_id" || echo "Warning: Failed to delete version $version_id"
          done

      - name: Delete Tenant Blob Container
        run: |
          echo "Deleting blob container tenant-${{ github.event.inputs.tenant_id }}..."
          az storage container delete \
            --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
            --name "tenant-${{ github.event.inputs.tenant_id }}" \
            --auth-mode key || echo "Warning: Failed to delete container tenant-${{ github.event.inputs.tenant_id }}"

      - name: Deployment Summary
        run: |
          echo "## Tenant Deletion Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tenant ID | \`${{ github.event.inputs.tenant_id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Action | Delete |" >> $GITHUB_STEP_SUMMARY
          echo "| Force Delete | ${{ github.event.inputs.force_delete }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Deleted |" >> $GITHUB_STEP_SUMMARY

          if [[ -n "${{ steps.tf_outputs.outputs.management_summary }}" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Management Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.tf_outputs.outputs.management_summary }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deleted Resources" >> $GITHUB_STEP_SUMMARY
          echo "- Container App: \`${{ steps.verify_tenant.outputs.tenant_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Storage Container: \`tenant-${{ github.event.inputs.tenant_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Container Image: \`quiz_app_ct-${{ github.event.inputs.tenant_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Tenant State: \`tenant-states/${{ github.event.inputs.tenant_id }}/state.json\`" >> $GITHUB_STEP_SUMMARY
