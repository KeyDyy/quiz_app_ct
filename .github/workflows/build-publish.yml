name: Build & Deploy Tenant

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      tenant_id:
        description: 'Tenant ID'
        required: true
        type: string
      supabase_url:
        description: 'Supabase URL'
        required: true
        type: string
      supabase_anon_key:
        description: 'Supabase Anonymous Key'
        required: true
        type: string
      database_url:
        description: 'Database URL'
        required: true
        type: string
      cpu_limit:
        description: 'CPU Limit'  
        required: false
        default: '0.5'
        type: string
      memory_limit:
        description: 'Memory Limit'
        required: false
        default: '1Gi'
        type: string
      min_replicas:
        description: 'Minimum Replicas'
        required: false
        default: '1'
        type: string
      max_replicas:
        description: 'Maximum Replicas'
        required: false
        default: '3'
        type: string

env:
  IMAGE_NAME: quiz_app_ct
  REGISTRY: ghcr.io
  GITHUB_REPOSITORY_OWNER: keydyy
  STORAGE_ACCOUNT_NAME: quizapptfstate
  STORAGE_CONTAINER_NAME: tfstate

jobs:
  build_and_deploy:
    # Skip if it's a push event from AzureFunction
    if: |
      (github.event_name == 'workflow_dispatch') || 
      (github.event_name == 'push' && github.actor != 'AzureFunction')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Ref: ${{ github.ref }}"

      - name: Check Existing Tenant State
        id: check_tenant
        run: |
          # Check if tenant state exists in blob storage
          az storage blob exists \
            --connection-string "${{ secrets.STORAGE_CONNECTION_STRING }}" \
            --container-name ${{ env.STORAGE_CONTAINER_NAME }} \
            --name "quiz-app/tenant-${{ env.TENANT_ID }}/terraform.tfstate" \
            --query "exists" \
            --output tsv > tenant_exists.txt
          
          TENANT_EXISTS=$(cat tenant_exists.txt)
          echo "tenant_exists=$TENANT_EXISTS" >> $GITHUB_OUTPUT
          
          if [[ "$TENANT_EXISTS" == "true" ]]; then
            echo "Tenant ${{ env.TENANT_ID }} already exists. Skipping deployment."
            exit 0
          fi

      - name: Extract tenant ID and load environment
        id: extract_tenant
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use inputs from workflow_dispatch
            echo "TENANT_ID=${{ github.event.inputs.tenant_id }}" >> $GITHUB_ENV
            echo "SUPABASE_URL=${{ github.event.inputs.supabase_url }}" >> $GITHUB_ENV
            echo "SUPABASE_KEY=${{ github.event.inputs.supabase_anon_key }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ github.event.inputs.database_url }}" >> $GITHUB_ENV
            echo "CPU_LIMIT=${{ github.event.inputs.cpu_limit }}" >> $GITHUB_ENV
            echo "MEMORY_LIMIT=${{ github.event.inputs.memory_limit }}" >> $GITHUB_ENV
            echo "MIN_REPLICAS=${{ github.event.inputs.min_replicas }}" >> $GITHUB_ENV
            echo "MAX_REPLICAS=${{ github.event.inputs.max_replicas }}" >> $GITHUB_ENV
          else
            # For push events, get tenant ID from Azure Function
            AZURE_FUNCTION_URL="${{ secrets.AZURE_FUNCTION_URL }}"
            AZURE_FUNCTION_KEY="${{ secrets.AZURE_FUNCTION_KEY }}"
            
            # Get list of all tenants from Azure Function
            RESPONSE=$(curl -s -H "x-functions-key: $AZURE_FUNCTION_KEY" \
              "$AZURE_FUNCTION_URL/api/get-tenant-config")
            
            if [[ $? -eq 0 ]]; then
              # Get the first tenant ID (you might want to modify this logic based on your needs)
              TENANT_ID=$(echo $RESPONSE | jq -r '.[0].tenant_id')
              if [[ -n "$TENANT_ID" ]]; then
                echo "TENANT_ID=$TENANT_ID" >> $GITHUB_ENV
                
                # Get tenant configuration
                RESPONSE=$(curl -s -H "x-functions-key: $AZURE_FUNCTION_KEY" \
                  "$AZURE_FUNCTION_URL/api/get-tenant-config?tenant_id=$TENANT_ID")
                
                if [[ $? -eq 0 ]]; then
                  # Parse response and set environment variables
                  SUPABASE_URL=$(echo $RESPONSE | jq -r '.supabase_url')
                  SUPABASE_KEY=$(echo $RESPONSE | jq -r '.supabase_anon_key')
                  DATABASE_URL=$(echo $RESPONSE | jq -r '.database_url')
                  CPU_LIMIT=$(echo $RESPONSE | jq -r '.cpu_limit // "0.5"')
                  MEMORY_LIMIT=$(echo $RESPONSE | jq -r '.memory_limit // "1Gi"')
                  MIN_REPLICAS=$(echo $RESPONSE | jq -r '.min_replicas // "1"')
                  MAX_REPLICAS=$(echo $RESPONSE | jq -r '.max_replicas // "3"')
                  
                  # Set environment variables
                  echo "SUPABASE_URL=$SUPABASE_URL" >> $GITHUB_ENV
                  echo "SUPABASE_KEY=$SUPABASE_KEY" >> $GITHUB_ENV
                  echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
                  echo "CPU_LIMIT=$CPU_LIMIT" >> $GITHUB_ENV
                  echo "MEMORY_LIMIT=$MEMORY_LIMIT" >> $GITHUB_ENV
                  echo "MIN_REPLICAS=$MIN_REPLICAS" >> $GITHUB_ENV
                  echo "MAX_REPLICAS=$MAX_REPLICAS" >> $GITHUB_ENV
                else
                  echo "Error: Failed to get tenant configuration from Azure Function"
                  exit 1
                fi
              else
                echo "Error: No tenant ID found"
                exit 1
              fi
            else
              echo "Error: Failed to get tenant list from Azure Function"
              exit 1
            fi
          fi

      - name: Validate environment variables
        run: |
          echo "Validating environment variables..."
          if [[ -z "$TENANT_ID" ]]; then
            echo "Error: TENANT_ID is not set"
            exit 1
          fi
          if [[ -z "$SUPABASE_URL" ]]; then
            echo "Error: SUPABASE_URL is not set"
            exit 1
          fi
          if [[ -z "$SUPABASE_KEY" ]]; then
            echo "Error: SUPABASE_KEY is not set"
            exit 1
          fi
          echo "Environment variables validated successfully"
          echo "TENANT_ID: $TENANT_ID"
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "SUPABASE_KEY: [REDACTED]"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:latest
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ env.SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ env.SUPABASE_KEY }}
            TENANT_ID=${{ env.TENANT_ID }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          # Initialize Terraform with tenant-specific state file
          terraform init \
            -backend-config="key=quiz-app/tenant-${{ env.TENANT_ID }}/terraform.tfstate"
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_CLI: false

      - name: Terraform Plan
        if: steps.check_tenant.outputs.tenant_exists != 'true'
        run: |
          # Plan only for the specific tenant
          terraform plan \
            -var="github_repository=keydyy/quiz_app_ct" \
            -var="ghcr_username=keydyy" \
            -var="ghcr_pat=${{ secrets.GH_PAT }}" \
            -var="create_new_environment=false" \
            -var="image_name=quiz_app_ct" \
            -var="container_apps={ \
              \"${{ env.TENANT_ID }}\" = { \
                name = \"quiz-app-${{ env.TENANT_ID }}\", \
                supabase_url = \"${{ env.SUPABASE_URL }}\", \
                supabase_anon_key = \"${{ env.SUPABASE_KEY }}\", \
                cpu = ${{ env.CPU_LIMIT }}, \
                memory = \"${{ env.MEMORY_LIMIT }}\" \
              } \
            }" \
            -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_CLI: false

      - name: Terraform Apply
        if: steps.check_tenant.outputs.tenant_exists != 'true'
        run: terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_CLI: false

      - name: Update Tenant State in Blob Storage
        if: steps.check_tenant.outputs.tenant_exists != 'true'
        run: |
          # Get storage account connection string from Terraform output
          STORAGE_CONNECTION_STRING=$(terraform output -json storage_connection_string | jq -r '.')
          
          # Get Terraform outputs as JSON
          TF_OUTPUTS=$(terraform output -json)
          
          # Extract values from Terraform outputs
          CONTAINER_APP_ID=$(echo "$TF_OUTPUTS" | jq -r --arg tenant "${{ env.TENANT_ID }}" '.container_app_ids.value[$tenant]')
          CONTAINER_APP_FQDN=$(echo "$TF_OUTPUTS" | jq -r --arg tenant "${{ env.TENANT_ID }}" '.container_app_fqdns.value[$tenant]')
          RESOURCE_GROUP=$(echo "$TF_OUTPUTS" | jq -r '.resource_group_name.value')
          ENV_ID=$(echo "$TF_OUTPUTS" | jq -r '.container_app_environment_id.value')
          
          # Create tenant state JSON with proper jq string concatenation
          TENANT_STATE=$(jq -n \
            --arg tenant_id "${{ env.TENANT_ID }}" \
            --arg name "quiz-app-${{ env.TENANT_ID }}" \
            --arg supabase_url "${{ env.SUPABASE_URL }}" \
            --arg supabase_key "${{ env.SUPABASE_KEY }}" \
            --arg cpu "${{ env.CPU_LIMIT }}" \
            --arg memory "${{ env.MEMORY_LIMIT }}" \
            --arg created_at "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --arg last_updated "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --arg container_app_id "$CONTAINER_APP_ID" \
            --arg container_app_fqdn "$CONTAINER_APP_FQDN" \
            --arg resource_group "$RESOURCE_GROUP" \
            --arg environment_id "$ENV_ID" \
            '{
              "tenant_id": $tenant_id,
              "name": $name,
              "supabase_url": $supabase_url,
              "supabase_anon_key": $supabase_key,
              "cpu": ($cpu | tonumber),
              "memory": $memory,
              "created_at": $created_at,
              "last_updated": $last_updated,
              "container_app_id": $container_app_id,
              "container_app_fqdn": $container_app_fqdn,
              "container_app_url": ("https://" + $container_app_fqdn),
              "status": "active",
              "resource_group": $resource_group,
              "environment_id": $environment_id,
              "storage_container": ("tenant-" + $tenant_id),
              "terraform_managed": true,
              "terraform_state": ("quiz-app/tenant-" + $tenant_id + "/terraform.tfstate")
            }')
          
          # Create a temporary file for the state JSON
          TEMP_FILE=$(mktemp)
          echo "$TENANT_STATE" > "$TEMP_FILE"
          
          # Upload tenant state to blob storage
          az storage blob upload \
            --connection-string "$STORAGE_CONNECTION_STRING" \
            --container-name "tenant-states" \
            --name "${{ env.TENANT_ID }}/state.json" \
            --content-type "application/json" \
            --overwrite true \
            --file "$TEMP_FILE"
          
          # Clean up temporary file
          rm "$TEMP_FILE"
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_CLI: false

      - name: Get Container App URL
        id: get_url
        if: steps.check_tenant.outputs.tenant_exists != 'true'
        run: |
          FQDN=$(terraform output -json container_app_fqdns | jq -r --arg tenant "${{ env.TENANT_ID }}" '.value[$tenant]')
          if [[ -n "$FQDN" && "$FQDN" != "null" ]]; then
            echo "container_url=https://$FQDN" >> $GITHUB_OUTPUT
          else
            echo "container_url=Not available yet" >> $GITHUB_OUTPUT
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_CLI: false

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary " >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check_tenant.outputs.tenant_exists }}" == "true" ]]; then
            echo "| Status | Tenant already exists, deployment skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tenant ID | \`${{ env.TENANT_ID }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Container Name | \`quiz-app-${{ env.TENANT_ID }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Docker Image | \`${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:latest\` |" >> $GITHUB_STEP_SUMMARY
            echo "| CPU Limit | ${{ env.CPU_LIMIT }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Memory Limit | ${{ env.MEMORY_LIMIT }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Container URL | ${{ steps.get_url.outputs.container_url }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Terraform State | \`quiz-app/tenant-${{ env.TENANT_ID }}/terraform.tfstate\` |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check Container App Status
        if: steps.check_tenant.outputs.tenant_exists != 'true'
        run: |
          echo "Checking container app status..."
          # Get the container app name
          APP_NAME="quiz-app-${{ env.TENANT_ID }}"
          
          # Get container app status
          az containerapp show \
            --name "$APP_NAME" \
            --resource-group "$(terraform output -raw resource_group_name)" \
            --query "{name:name,status:properties.runningStatus,revision:properties.latestRevisionName,image:properties.template.containers[0].image,health:properties.template.containers[0].probes[0].status}" \
            --output json > app_status.json
          
          # Display status
          echo "Container App Status:"
          cat app_status.json
          
          # Add to workflow summary
          echo "## Container App Status" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat app_status.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Check if container is running
          STATUS=$(jq -r '.status' app_status.json)
          if [[ "$STATUS" != "Running" ]]; then
            echo "Warning: Container app is not running. Status: $STATUS"
            echo "| Container Status | ⚠️ $STATUS |" >> $GITHUB_STEP_SUMMARY
          else
            echo "Container app is running successfully"
            echo "| Container Status | ✅ $STATUS |" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_CLI: false