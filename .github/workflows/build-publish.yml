name: Build & Deploy Tenant

on:
  push:
    branches: [ "main", "deploy/**" ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      tenant_id:
        description: 'Tenant ID'
        required: true
        type: string
      supabase_url:
        description: 'Supabase URL'
        required: true
        type: string
      supabase_anon_key:
        description: 'Supabase Anonymous Key'
        required: true
        type: string
      cpu_limit:
        description: 'CPU Limit'  
        required: false
        default: '0.5'
        type: string
      memory_limit:
        description: 'Memory Limit'
        required: false
        default: '1Gi'
        type: string
      min_replicas:
        description: 'Minimum Replicas'
        required: false
        default: '1'
        type: string
      max_replicas:
        description: 'Maximum Replicas'
        required: false
        default: '3'
        type: string

env:
  IMAGE_NAME: quiz_app_ct
  REGISTRY: ghcr.io
  GITHUB_REPOSITORY_OWNER: keydyy

jobs:
  build_and_deploy:
    # Skip if:
    # 1. It's a push event from AzureFunction
    # 2. It's a push event with commit message containing "Add tenant configuration"
    # 3. It's a push event that only modified terraform files
    if: |
      (github.event_name == 'workflow_dispatch') || 
      (github.event_name == 'push' && 
       github.actor != 'AzureFunction' && 
       !contains(github.event.head_commit.message, 'Add tenant configuration') &&
       !contains(github.event.head_commit.modified, 'terraform/'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"

      - name: Extract tenant ID and load environment
        id: extract_tenant
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use inputs from workflow_dispatch
            echo "TENANT_ID=${{ github.event.inputs.tenant_id }}" >> $GITHUB_ENV
            echo "SUPABASE_URL=${{ github.event.inputs.supabase_url }}" >> $GITHUB_ENV
            echo "SUPABASE_KEY=${{ github.event.inputs.supabase_anon_key }}" >> $GITHUB_ENV
            echo "CPU_LIMIT=${{ github.event.inputs.cpu_limit }}" >> $GITHUB_ENV
            echo "MEMORY_LIMIT=${{ github.event.inputs.memory_limit }}" >> $GITHUB_ENV
            echo "MIN_REPLICAS=${{ github.event.inputs.min_replicas }}" >> $GITHUB_ENV
            echo "MAX_REPLICAS=${{ github.event.inputs.max_replicas }}" >> $GITHUB_ENV
          else
            # Extract tenant ID from branch name (deploy/tenant123 -> tenant123)
            BRANCH_NAME="${{ github.ref_name }}"
            if [[ $BRANCH_NAME == deploy/* ]]; then
              TENANT_ID="${BRANCH_NAME#deploy/}"
              echo "TENANT_ID=$TENANT_ID" >> $GITHUB_ENV
              
              # Load tenant config from env file
              ENV_FILE="envs/.env.$TENANT_ID"
              echo "Looking for environment file: $ENV_FILE"
              
              if [[ -f "$ENV_FILE" ]]; then
                echo "Found environment file, loading variables..."
                # Read each line and export variables
                while IFS= read -r line || [[ -n "$line" ]]; do
                  # Skip empty lines and comments
                  [[ -z "$line" || "$line" =~ ^# ]] && continue
                  # Export the variable
                  export "$line"
                  # Add to GITHUB_ENV
                  echo "$line" >> $GITHUB_ENV
                done < "$ENV_FILE"
                echo "Environment variables loaded successfully"
              else
                echo "Error: Environment file not found at $ENV_FILE"
                echo "Current directory: $(pwd)"
                echo "Directory contents:"
                ls -R
                echo "envs directory contents:"
                ls -la envs/ || echo "envs directory not found"
                exit 1
              fi
            else
              echo "Error: Not a deploy branch"
              exit 1
            fi
          fi

      - name: Validate environment variables
        run: |
          echo "Validating environment variables..."
          if [[ -z "$TENANT_ID" ]]; then
            echo "Error: TENANT_ID is not set"
            exit 1
          fi
          if [[ -z "$SUPABASE_URL" ]]; then
            echo "Error: SUPABASE_URL is not set"
            exit 1
          fi
          if [[ -z "$SUPABASE_KEY" ]]; then
            echo "Error: SUPABASE_KEY is not set"
            exit 1
          fi
          echo "Environment variables validated successfully"
          echo "TENANT_ID: $TENANT_ID"
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "SUPABASE_KEY: [REDACTED]"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:latest
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ env.SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ env.SUPABASE_KEY }}
            TENANT_ID=${{ env.TENANT_ID }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="github_repository=keydyy/quiz_app_ct" \
            -var="ghcr_username=keydyy" \
            -var="ghcr_pat=${{ secrets.GH_PAT }}" \
            -var="create_new_environment=false" \
            -var="image_name=quiz_app_ct" \
            -var="container_apps={ \
              \"${{ env.TENANT_ID }}\" = { \
                name = \"quiz-app-${{ env.TENANT_ID }}\", \
                supabase_url = \"${{ env.SUPABASE_URL }}\", \
                supabase_anon_key = \"${{ env.SUPABASE_KEY }}\", \
                cpu = ${{ env.CPU_LIMIT }}, \
                memory = \"${{ env.MEMORY_LIMIT }}\" \
              } \
            }" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Get Container App URL
        id: get_url
        run: |
          FQDN=$(terraform output -raw container_app_fqdn 2>/dev/null || echo "")
          if [[ -n "$FQDN" ]]; then
            echo "container_url=https://$FQDN" >> $GITHUB_OUTPUT
          else
            echo "container_url=Not available yet" >> $GITHUB_OUTPUT
          fi

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary " >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tenant ID | \`${{ env.TENANT_ID }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Name | \`quiz-app-${{ env.TENANT_ID }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image | \`${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:latest\` |" >> $GITHUB_STEP_SUMMARY
          echo "| CPU Limit | ${{ env.CPU_LIMIT }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Memory Limit | ${{ env.MEMORY_LIMIT }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Replicas | ${{ env.MIN_REPLICAS }}-${{ env.MAX_REPLICAS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container URL | ${{ steps.get_url.outputs.container_url }} |" >> $GITHUB_STEP_SUMMARY