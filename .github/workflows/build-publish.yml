name: Build & Deploy Tenant

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      tenant_id:
        description: 'Tenant ID'
        required: true
        type: string
      supabase_url:
        description: 'Supabase URL'
        required: true
        type: string
      supabase_anon_key:
        description: 'Supabase Anonymous Key'
        required: true
        type: string
      database_url:
        description: 'Database URL'
        required: true
        type: string
      cpu_limit:
        description: 'CPU Limit'  
        required: false
        default: '0.5'
        type: string
      memory_limit:
        description: 'Memory Limit'
        required: false
        default: '1Gi'
        type: string
      min_replicas:
        description: 'Minimum Replicas'
        required: false
        default: '1'
        type: string
      max_replicas:
        description: 'Maximum Replicas'
        required: false
        default: '3'
        type: string
      create_new_environment:
        description: 'Create New Environment'
        required: false
        default: 'false'
        type: string

env:
  IMAGE_NAME: quiz_app_ct
  REGISTRY: ghcr.io
  GITHUB_REPOSITORY_OWNER: keydyy
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

jobs:
  build_and_deploy:
    # Skip if it's a push event from AzureFunction
    if: |
      (github.event_name == 'workflow_dispatch') || 
      (github.event_name == 'push' && github.actor != 'AzureFunction')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for OIDC
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Ref: ${{ github.ref }}"

      - name: Extract tenant ID and load environment
        id: extract_tenant
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use inputs from workflow_dispatch
            echo "TENANT_ID=${{ github.event.inputs.tenant_id }}" >> $GITHUB_ENV
            echo "SUPABASE_URL=${{ github.event.inputs.supabase_url }}" >> $GITHUB_ENV
            echo "SUPABASE_KEY=${{ github.event.inputs.supabase_anon_key }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ github.event.inputs.database_url }}" >> $GITHUB_ENV
            echo "CPU_LIMIT=${{ github.event.inputs.cpu_limit }}" >> $GITHUB_ENV
            echo "MEMORY_LIMIT=${{ github.event.inputs.memory_limit }}" >> $GITHUB_ENV
            echo "MIN_REPLICAS=${{ github.event.inputs.min_replicas }}" >> $GITHUB_ENV
            echo "MAX_REPLICAS=${{ github.event.inputs.max_replicas }}" >> $GITHUB_ENV
            echo "CREATE_NEW_ENVIRONMENT=${{ github.event.inputs.create_new_environment }}" >> $GITHUB_ENV
          else
            # For push events, get tenant ID from Azure Function
            AZURE_FUNCTION_URL="${{ secrets.AZURE_FUNCTION_URL }}"
            AZURE_FUNCTION_KEY="${{ secrets.AZURE_FUNCTION_KEY }}"
            
            # Get list of all tenants from Azure Function
            RESPONSE=$(curl -s -H "x-functions-key: $AZURE_FUNCTION_KEY" \
              "$AZURE_FUNCTION_URL/api/get-tenant-config")
            
            if [[ $? -eq 0 ]]; then
              # Get the first tenant ID (you might want to modify this logic based on your needs)
              TENANT_ID=$(echo $RESPONSE | jq -r '.[0].tenant_id')
              if [[ -n "$TENANT_ID" ]]; then
                echo "TENANT_ID=$TENANT_ID" >> $GITHUB_ENV
                
                # Get tenant configuration
                RESPONSE=$(curl -s -H "x-functions-key: $AZURE_FUNCTION_KEY" \
                  "$AZURE_FUNCTION_URL/api/get-tenant-config?tenant_id=$TENANT_ID")
                
                if [[ $? -eq 0 ]]; then
                  # Parse response and set environment variables
                  SUPABASE_URL=$(echo $RESPONSE | jq -r '.supabase_url')
                  SUPABASE_KEY=$(echo $RESPONSE | jq -r '.supabase_anon_key')
                  DATABASE_URL=$(echo $RESPONSE | jq -r '.database_url')
                  CPU_LIMIT=$(echo $RESPONSE | jq -r '.cpu_limit // "0.5"')
                  MEMORY_LIMIT=$(echo $RESPONSE | jq -r '.memory_limit // "1Gi"')
                  MIN_REPLICAS=$(echo $RESPONSE | jq -r '.min_replicas // "1"')
                  MAX_REPLICAS=$(echo $RESPONSE | jq -r '.max_replicas // "3"')
                  
                  # Set environment variables
                  echo "SUPABASE_URL=$SUPABASE_URL" >> $GITHUB_ENV
                  echo "SUPABASE_KEY=$SUPABASE_KEY" >> $GITHUB_ENV
                  echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
                  echo "CPU_LIMIT=$CPU_LIMIT" >> $GITHUB_ENV
                  echo "MEMORY_LIMIT=$MEMORY_LIMIT" >> $GITHUB_ENV
                  echo "MIN_REPLICAS=$MIN_REPLICAS" >> $GITHUB_ENV
                  echo "MAX_REPLICAS=$MAX_REPLICAS" >> $GITHUB_ENV
                  echo "CREATE_NEW_ENVIRONMENT=false" >> $GITHUB_ENV
                else
                  echo "Error: Failed to get tenant configuration from Azure Function"
                  exit 1
                fi
              else
                echo "Error: No tenant ID found"
                exit 1
              fi
            else
              echo "Error: Failed to get tenant list from Azure Function"
              exit 1
            fi
          fi

      - name: Validate environment variables
        run: |
          echo "Validating environment variables..."
          if [[ -z "$TENANT_ID" ]]; then
            echo "Error: TENANT_ID is not set"
            exit 1
          fi
          if [[ -z "$SUPABASE_URL" ]]; then
            echo "Error: SUPABASE_URL is not set"
            exit 1
          fi
          if [[ -z "$SUPABASE_KEY" ]]; then
            echo "Error: SUPABASE_KEY is not set"
            exit 1
          fi
          echo "Environment variables validated successfully"
          echo "TENANT_ID: $TENANT_ID"
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "CPU_LIMIT: $CPU_LIMIT"
          echo "MEMORY_LIMIT: $MEMORY_LIMIT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:latest
            ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ env.SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ env.SUPABASE_KEY }}
            TENANT_ID=${{ env.TENANT_ID }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Environment Variables for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: Create Storage Account for Terraform State
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.create_new_environment == 'true' }}
        run: |
          # Create resource group if it doesn't exist
          az group create \
            --name quizapp \
            --location "North Europe"

          # Create storage account if it doesn't exist
          az storage account create \
            --name quizapptfstate \
            --resource-group quizapp \
            --location "North Europe" \
            --sku Standard_LRS \
            --encryption-services blob \
            --https-only true \
            --min-tls-version TLS1_2

          # Create container if it doesn't exist
          az storage container create \
            --name tfstate \
            --account-name quizapptfstate \
            --auth-mode login

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="resource_group_name=quizapp" \
            -backend-config="storage_account_name=quizapptfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ env.TENANT_ID }}-terraform.tfstate" \
            -backend-config="use_oidc=true" \
            -backend-config="use_azuread_auth=true" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}"

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="github_repository=keydyy/quiz_app_ct" \
            -var="ghcr_username=keydyy" \
            -var="ghcr_pat=${{ secrets.GH_PAT }}" \
            -var="create_new_environment=${{ env.CREATE_NEW_ENVIRONMENT }}" \
            -var="image_name=${{ env.IMAGE_NAME }}" \
            -var="container_apps={ \
              \"${{ env.TENANT_ID }}\" = { \
                name = \"quiz-app-${{ env.TENANT_ID }}\", \
                supabase_url = \"${{ env.SUPABASE_URL }}\", \
                supabase_anon_key = \"${{ env.SUPABASE_KEY }}\", \
                cpu = ${{ env.CPU_LIMIT }}, \
                memory = \"${{ env.MEMORY_LIMIT }}\" \
              } \
            }" \
            -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get Container App URL
        id: get_url
        run: |
          cd terraform
          CONTAINER_APP_URLS=$(terraform output -json container_app_urls)
          CONTAINER_URL=$(echo $CONTAINER_APP_URLS | jq -r --arg tenant "${{ env.TENANT_ID }}" '.[$tenant]')
          if [[ -n "$CONTAINER_URL" && "$CONTAINER_URL" != "null" ]]; then
            echo "container_url=https://$CONTAINER_URL" >> $GITHUB_OUTPUT
          else
            echo "container_url=Not available yet" >> $GITHUB_OUTPUT
          fi

      - name: Verify Deployment
        run: |
          cd terraform
          # Get storage account connection string
          STORAGE_CONNECTION_STRING=$(terraform output -raw storage_connection_string)
          
          # Check if tenant state exists
          az storage blob exists \
            --connection-string "$STORAGE_CONNECTION_STRING" \
            --container-name "tenant-states" \
            --name "${{ env.TENANT_ID }}/state.json" \
            --auth-mode key

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tenant ID | \`${{ env.TENANT_ID }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Name | \`quiz-app-${{ env.TENANT_ID }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image | \`${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.IMAGE_NAME }}-${{ env.TENANT_ID }}:latest\` |" >> $GITHUB_STEP_SUMMARY
          echo "| CPU Limit | ${{ env.CPU_LIMIT }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Memory Limit | ${{ env.MEMORY_LIMIT }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Replicas | ${{ env.MIN_REPLICAS }}-${{ env.MAX_REPLICAS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container URL | ${{ steps.get_url.outputs.container_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform State | \`${{ env.TENANT_ID }}-terraform.tfstate\` |" >> $GITHUB_STEP_SUMMARY